plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

version = "${version_major}.${version_minor}.${version_patch}"
group = "com.snowshock35.jeiintegration"
archivesBaseName = "jeiintegration_${mc_version}"

// Append build number if building from CI
if (System.getenv('TRAVIS_BUILD_NUMBER') != null) {
  version += ".${System.getenv('TRAVIS_BUILD_NUMBER')}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
  mappings channel: 'official', version: "${mc_version}"

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'

      mods {
        jeiintegration {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'

      mods {
        jeiintegration {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'jeiintegration', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        jeiintegration {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  maven {
    name 'JEI'
    url 'https://dvs1.progwml6.com/files/maven'
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

  compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${version_jei}")
  compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${version_jei}")
  runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${version_jei}")
}

jar {
  manifest {
    attributes([
        "Specification-Title"     : "jeiintegration",
        "Specification-Vendor"    : "SnowShock35",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.jar.archiveVersion,
        "Implementation-Vendor"   :"SnowShock35",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

jar.finalizedBy('reobfJar')
tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/mcmodsrepo"
    }
  }
}

curseforge {
  apiKey = System.getenv('CURSE_KEY') == null ? '0' : System.getenv('CURSE_KEY')

  options {
    detectNewerJava = true
    javaVersionAutoDetect = true
    detectNewerJava = true
    javaIntegration = true
    forgeGradleIntegration = true
  }

  project {
    id = project.curse_project_id
    changelog = System.getenv('CHANGELOG') == null ? '' : System.getenv('CHANGELOG')
    changelogType = 'markdown'
    releaseType = 'alpha'
    addGameVersion project.mc_version

    mainArtifact (jar) {
      displayName = "${jar.archiveFileName.get()}".replace(".jar", "")
      relations {
        requiredDependency 'jei'
      }
    }
  }
}
